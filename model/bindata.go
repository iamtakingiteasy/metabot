package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_data_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4b\x0e\xc3\x20\x0c\x04\xd0\x7d\x4e\x91\x7b\xe4\x30\x16\x9f\x09\xb5\x04\xa6\xb2\x4d\xcf\xdf\x45\xbb\x09\xb0\x9d\x67\x6b\x26\x6b\x7f\x9f\x1e\x62\xc5\x89\x16\x91\x8d\x6e\x46\xcd\x76\x1d\x8b\x3c\xa2\x06\x71\xee\x42\xc3\xa0\x7b\xd1\x5e\x31\x8b\x59\x28\x53\x58\x06\xd7\x6c\xf4\xe9\x9c\x40\xe6\xc1\xc7\xd6\x37\x92\x5e\x41\x04\x75\xee\x68\x71\x5e\xb4\x6e\x5c\xb7\xfd\x6a\xae\xe3\x51\xd0\xe5\xe6\x42\x0a\x73\xe5\xe4\xa4\x63\xfe\xfa\x5f\x84\xdc\x58\x76\x72\x7d\x03\x00\x00\xff\xff\xfb\x07\x86\x29\x5f\x01\x00\x00")

func _1_data_down_sql() ([]byte, error) {
	return bindata_read(
		__1_data_down_sql,
		"1_data.down.sql",
	)
}

var __1_data_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\xd1\x92\xac\x28\x0c\x7d\xef\xaf\xe0\x71\x66\x6b\xeb\xfe\xc0\xce\x7e\x8b\x85\x1a\xbb\xb3\x83\x60\x01\x76\x4f\xff\xfd\x96\x82\x08\x48\xd0\x7b\xfb\x49\x73\x4e\x02\xe4\x04\x88\xdd\x69\xe0\x16\x98\xe5\xad\x00\xd6\x29\x39\xe0\xfd\xf6\x71\x63\xfe\xb1\xb9\xcf\x28\xfa\xa6\x47\xd3\x29\xdd\x37\xd8\x33\x0b\x3f\x96\x4d\x1a\x47\xae\xdf\xec\x1b\xde\x7f\xef\xdc\x49\xc3\x80\x3f\x2b\x23\xb2\x76\x4a\x28\xdd\x80\xd6\x4a\x33\x94\x47\xe4\xc5\xb5\x2c\x02\x28\x07\x95\x01\x7c\xb6\x4a\xc3\xa8\x9e\xd0\xf0\xce\xe2\x13\x58\xab\x94\x00\x2e\xcb\x1c\x8b\x23\xb0\x16\xef\x69\x10\x0d\xc6\x6a\xec\x6c\x16\xe2\xf6\xf9\xcf\xed\x56\xc8\x46\xc3\xfb\x11\xa5\x89\x93\xe2\x2c\x4b\x36\x5a\xbc\x1b\xd0\xc8\x05\x91\x12\xcf\x2c\x66\xf1\x48\xb3\xef\x09\xf2\x15\x3b\x64\x02\x3d\xa2\x31\xa8\x64\x33\x72\xf3\x5d\x26\x69\x25\xe0\x7c\x90\xd9\x80\xce\x59\xe4\xda\x43\xae\xf4\x2c\x20\xc9\x41\x8a\x5c\xc9\x45\xe6\x71\x96\x93\x8c\x0e\x4f\x90\x96\x11\x4a\x3a\x8a\x01\x01\x9d\x55\xba\xb8\xc4\x0b\x6e\xdd\x83\x4b\x09\xe2\x0f\x3c\xd7\x01\x27\x6e\x2d\x68\xf9\xbb\xa3\x5d\x73\x5b\x6a\x55\xe5\xfb\xa4\xc8\x69\xa4\xb2\x38\xbc\x0b\x3b\xa3\x46\xff\xfd\xc5\x7b\xf7\x93\x3d\x96\x70\x4b\x05\x7a\x2c\xbd\xb5\x30\x5c\xad\xb9\xc7\x6a\x71\x79\x4a\x61\xda\x1e\x91\x7c\x84\xdc\x86\x23\xbf\x03\x6b\xdf\x16\x78\x64\x35\x93\xe0\xe6\x71\x30\xbb\xc9\xf5\x6c\x59\xa9\xb1\x7c\x9c\x58\x0f\x03\x9f\x85\x65\x52\xbd\x3e\x3e\xe3\x49\x80\x80\x84\x19\x2f\xee\x89\xf0\xda\x88\x82\x1b\xcb\xb8\xb9\xb9\x62\x60\xfc\xd7\x5f\x6c\xd0\x6a\xf4\x30\xe3\x4c\xc0\x60\xd9\x7f\x0a\xe5\x66\x6a\x99\x92\x37\xb6\xfe\xf8\xaf\xe3\x9a\xff\x65\x6d\xc1\xca\x65\x9f\xfb\x60\xcf\xbe\x76\x2e\xf6\xb7\xd7\x03\x34\xc4\x16\x86\x86\xc9\x59\x88\x5c\x96\x45\x3c\xa7\xca\xfa\x54\x15\xc5\x31\xc8\x1d\xee\x60\x12\x48\x14\x73\xa6\xf5\x46\xd8\xaa\xdf\x99\x26\x65\x30\xde\x13\xde\x1a\x0e\x4a\x93\x02\x17\x54\xf4\xd3\x3a\x15\xd1\xf1\x28\x0d\x57\x34\x91\xd0\x59\x12\x05\x0f\x19\x58\x04\x3c\x18\x63\xfd\x42\xd2\xbf\x02\x33\x52\x2f\xa0\x84\x78\xcb\x01\xe5\xc4\x5b\x9f\xaa\xe2\x39\x46\x41\x1d\x07\x24\xea\xec\x5c\x8d\x23\x4a\x6e\x95\xce\xb0\x56\xd9\xf8\x28\x72\x46\x18\x39\x8a\x8c\xc8\x9f\xdc\x72\xbd\xef\x3e\x67\x15\xaa\xe3\x22\x1f\xef\x09\x1a\x07\x84\xfe\x18\xf8\x82\xca\x7e\xca\xa7\x2a\xfb\xf1\x09\x95\x57\x34\x51\xd9\x59\x12\x95\x0f\x99\x5c\x54\x3e\x18\x63\x95\x83\x3a\x5f\x81\x19\xa9\x1c\x50\x42\xe5\x11\xc6\x76\xd3\xd9\x3f\x57\x95\xde\x38\xe4\x46\xdd\x08\xd4\x85\xba\xe1\x12\xbb\xef\x83\x71\xc9\x0a\xf4\x0d\xb7\x7b\x92\x63\xf8\x82\x54\x1b\xf5\x5c\xac\x8d\x49\xc9\xe5\xf1\x44\xb0\xcd\x96\x48\x46\xa6\x64\x91\x8e\x04\x63\x09\xa9\x9c\xc5\x01\x72\xac\xe4\xef\x8b\x60\x7f\x0d\x65\x10\x31\x88\x42\xf0\x97\xb9\x6f\xd8\xfc\x4b\xbd\x47\xdb\x48\x74\x5b\xb6\x31\x6a\x58\x72\x38\x04\x6b\xd2\xd7\x6e\xc6\x16\xad\x5e\x66\x9c\xdb\x27\xae\x41\xda\xea\x28\xf9\xd1\xbf\x0f\x6f\x86\x57\xd2\xf8\x84\x19\xa8\x09\xbb\x63\xa0\x55\x07\x81\x23\xda\x43\xa8\x0b\xe5\xb9\x67\xe4\xb4\x3e\x03\x95\x2a\xd0\x8d\x90\x54\x68\x30\x26\x25\x5a\x12\x62\x29\xae\x92\x3d\x2e\xac\xb8\x0e\xbe\x62\x7e\x54\x5a\x31\x87\xa8\x2d\xdf\x28\x3c\x15\x76\xd0\x18\xcb\xed\x9c\xf4\x6a\xb1\xfd\x4a\xe3\x96\xf0\xd7\x66\xf2\xbc\xcf\x4a\x7c\xc8\x82\x2d\x91\x2b\x5d\x6e\x89\x4e\x9d\x7b\xc5\xd0\x97\xdb\xc4\xc4\xed\x72\xcf\x98\x78\xd5\x1b\xc8\x84\x5b\xe8\x26\x53\xbc\xd4\x5a\xd6\x33\x1c\x75\x9b\x75\x62\xa1\x01\xad\xe6\x97\x0a\x5c\x3b\x2f\x89\xba\xfb\x22\x42\x1d\x5b\xde\xdc\x93\xbc\x5c\x8d\xe1\x77\xd8\x6e\x57\xf7\x72\x72\xbd\x7a\x52\xe5\x7e\xf5\x8c\x4a\x5d\x06\x0e\x7d\x09\x7b\x42\x0d\x8b\x8f\xe0\x60\x7c\x41\xfb\x50\xea\xbb\x3e\x33\x25\xed\xf2\xe5\x7d\x04\xae\xdc\xdf\xdb\xcc\x2e\x5c\xe0\x9e\x4a\xdf\xe0\x8e\x90\x5d\xe1\xde\x98\xdd\xe1\x54\xde\xdd\x1d\x4c\xa1\xe9\x2d\x4c\x2b\x93\x44\x29\xe0\xc5\x38\xe5\x76\x80\x00\x8b\x11\x28\xe7\x33\xbf\xd0\x48\x84\xf7\xa8\x93\xd8\x39\x44\xd9\x2f\xbd\x86\xff\x1a\x77\x8f\xd5\x92\xf7\x14\x1f\xd7\x53\x51\x5a\xa6\x61\x00\x0d\xb2\x03\x13\x44\xfb\x88\x46\xff\x8c\x9c\xf7\x82\xda\x6a\x6e\x03\x96\x1a\xce\x6c\xc9\x87\xa1\xb7\xf5\xb0\x7c\x8e\x4c\x6b\x87\x90\x87\x40\x2b\x0e\x31\x66\x2d\x72\x13\x9f\xed\x43\xe9\xb4\x9d\x49\x21\xec\x94\xac\x78\x4e\x5a\xfd\xbc\xcf\x48\x05\x64\xd2\xea\x89\x3d\x94\x87\x0e\x60\xc1\xd1\x3e\xe6\xb1\x95\x1c\x45\xf3\xc2\xde\x3e\xb2\x94\xec\xe8\x03\xf0\xfe\xb0\x24\x5c\x8d\xec\x16\x55\xa0\xac\xff\xa7\x14\x07\x76\x48\x71\x50\x07\x91\xd1\xc8\xc1\x96\x14\xa8\xe2\x60\x0e\x29\x0e\xe6\x20\x32\x1a\x39\xd8\xa0\x94\x05\xdd\xac\xff\x7a\x97\x21\x4a\x63\x0f\xd7\x0b\xe1\xc2\x21\x1a\x8a\xba\x72\x84\xc6\x5b\xb5\x19\x10\x44\xba\x63\x9d\xe5\xca\xc6\xf5\xcc\xf5\xad\xbc\x7b\x1d\xf1\x23\x9c\x05\x9f\x47\xef\x52\xe9\x7a\xe8\xc9\xc5\x4c\x61\x28\x05\xca\xe4\x1f\xfd\x14\xbf\x9e\x2b\xef\x50\x4c\xd9\xff\x01\x00\x00\xff\xff\xf2\x1f\xaf\xdf\xf0\x18\x00\x00")

func _1_data_up_sql() ([]byte, error) {
	return bindata_read(
		__1_data_up_sql,
		"1_data.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_data.down.sql": _1_data_down_sql,
	"1_data.up.sql":   _1_data_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_data.down.sql": &_bintree_t{_1_data_down_sql, map[string]*_bintree_t{}},
	"1_data.up.sql":   &_bintree_t{_1_data_up_sql, map[string]*_bintree_t{}},
}}
